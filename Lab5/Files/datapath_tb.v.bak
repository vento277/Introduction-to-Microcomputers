module datapath(datapath_in, vsel, writenum, write, readnum, clk, loada, loadb, shift, asel, bsel, ALUop, loadc, loads, Z_out, datapath_out);

input[15:0] datapath_in;
input [2:0] writenum, readnum;
input [1:0] ALUop, shift;
input write, clk, asel, bsel, vsel, loada, loadb, loadc, loads;

output [15:0] datapath_out;
output Z_out;

reg[15:0] data_in;
wire [15:0] data_out, A_in, B_in, sout, Ain, Bin, out;
wire Z;

  always @(*)begin
    case(vsel)
      1'b0 : data_in = datapath_out;
      1'b1 : data_in = datapath_in;
     endcase
  end


// Resister File
regfile U0(data_in, writenum, write, readnum, clk, data_out);
vDFF_L A(clk, loada, data_out, A_in);
vDFF_L B(clk, loadb, data_out, B_in);

shifter U1(B_in, shift, sout);
MUX_asel muxa(A_in, asel, Ain);
MUX_bsel muxb(sout, datapath_in, bsel, Bin);

alu U2(Ain, Bin, ALUop, out, Z);
vDFF_L C(clk, loadc, out, datapath_out);
vDFF_L #(1) status(clk, loads, Z, Z_out);

endmodule


module MUX_asel(A_in, sel, Ain);
  input [15:0] A_in;
  input sel;
  output [15:0] Ain;

  reg [15:0]Ain;

  always@(*) begin
    case(sel)
      1'b0: Ain = A_in;
      1'b1: Ain = 16'd0;
    endcase
  end
endmodule


module MUX_bsel(sout, datapath_in, sel, Bin);
  input [15:0] sout, datapath_in;
  input sel;
  output [15:0] Bin;

  reg [15:0] Bin;

  always@(*) begin
    case(sel)
      1'b0: Bin = sout;
      1'b1: Bin = {11'd0, datapath_in[4:0]};
    endcase
  end
endmodule


module datapath_tb();
reg[15:0] datapath_in;
reg [2:0] writenum, readnum;
reg [1:0] ALUop, shift;
reg write, clk, vsel, loada, loadb, bsel, asel, loadc, loads;
wire [15:0] datapath_out;
wire Z;


reg err;

datapath dut(datapath_in, vsel, writenum, write, readnum, clk, loada, loadb, shift, asel, bsel, ALUop, loadc, loads, Z_out, datapath_out);

initial begin
  err = 0;

  //MOV R0, #7 ; this means, take the absolute number 7 and store it in R0
  //MOV R1, #2 ; this means, take the absolute number 2 and store it in R1
  //ADD R2, R1, R0, LSL#1 ; this means R2 = R1 + (R0 shifted left by 1) = 2+14=16

  vsel = 1'b1;
  datapath_in = 16'b0000000000000111; 	// 7
  writenum = 3'b000;			// MOV R0, #7
  write = 1'b1; #1
  clk = 1'b1; #1
  clk =1'b0;
  write = 1'b0;

  #3

  vsel = 1'b1;
  datapath_in = 16'b0000000000000010; 	// 2
  writenum = 3'b001;			// MOV R1, #2
  write = 1'b1; #1
  clk = 1'b1; #1
  clk =1'b0;
  write = 1'b0;

  #3

  readnum = 3'b000;			// loadb = 7
  loadb = 1'b1; #1
  clk = 1'b1; #1
  clk =1'b0;
  loadb = 1'b0;
  readnum = 3'b001;			// loada = 2
  loada = 1'b1; #1
  clk = 1'b1; #1
  clk =1'b0;
  loada = 1'b0;

  #3

  shift = 2'b01;			// shift by 1 to L 7 -> 14
  asel = 1'b0;				// a&b MUX
  bsel = 1'b0;

  ALUop = 2'b00;			// add 2+14
  loadc = 1'b1; #1			// c = 16
  loads = 1'b1; #1  

  clk = 1'b1; #1			// datapath_out = 16
  clk =1'b0;
  loadc = 1'b0;

  if (datapath_out != 16'b0000000000010000) begin
	err = 1; end
  
  #3

  vsel = 1'b0;
  writenum = 3'b010;			// MOV R2, #16
  write = 1'b1; #1
  clk = 1'b1; #1
  clk =1'b0;
  write = 1'b0;

  if (err != 1) begin
  $display("all test passed!");
  end

end
endmodule
